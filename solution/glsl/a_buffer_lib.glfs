#version 430

#define MAX_FRAGMENTS 32
#define NODE_COUNTER_BINDING_POINT 0
#define HEAD_POINTERS_BINDING_POINT 0
#define NODES_BINDING_POINT 1

uniform sampler2D depth_tex;
uniform ivec2 viewport_dims;
uniform int nodes_per_pixel = 64;

layout(binding = NODE_COUNTER_BINDING_POINT) uniform atomic_uint node_buffer_counter;

layout (std430, binding = HEAD_POINTERS_BINDING_POINT) buffer head_pointers_ssbo 
{
	int head_ptrs[];
};

struct Node 
{
	uint color;
	float depth;
	int ptr;
};

layout (std430, binding = NODES_BINDING_POINT) buffer nodes_ssbo 
{
	Node nodes[];
};

struct Fragment 
{
	uint color;
	float depth;
};

bool a_buffer_gather_and_blend(in vec2 frag_xy, out vec4 rgba, out float depth)
{
	ivec2 pixel_coords = ivec2(frag_xy);
	int node_addr = head_ptrs[pixel_coords.x + viewport_dims.x * pixel_coords.y];
	if (node_addr == -1)
		return false;

	int count = 0;
	int j = 0;
	Fragment fragments[MAX_FRAGMENTS + 1];

	Node node;
	// Gather all fragments for this pixel and sort them with insertion sort
	// While all fragments are processed only MAX_FRAGMENTS amount of the closest are kept for blending
	while (node_addr > -1) {
		node = nodes[node_addr];
		j = count;
		while (j > 0 && fragments[j - 1].depth > node.depth) {
			fragments[j] = fragments[j - 1];
			--j;
		}
		if (j < MAX_FRAGMENTS) {
			fragments[j] = Fragment(node.color, node.depth);
			count = count < MAX_FRAGMENTS ? count + 1 : MAX_FRAGMENTS;
		}
		node_addr = node.ptr;
	}

	// Blend the fragments Front-to-back with transparency in dst.a 
	vec4 dst = vec4(0.0, 0.0, 0.0, 1.0);
	for (int i = 0; i < count; ++i) {
		vec4 src = unpackUnorm4x8(fragments[i].color);
		dst.rgb = dst.a * src.rgb + 1.0 * dst.rgb;
		dst.a = (1.0 - src.a) * dst.a;
	}
	rgba = vec4(dst.rgb, 1.0 - dst.a);
	depth = fragments[0].depth-0.000001;
	return true;
}

bool a_buffer_insert_fragment(vec3 frag_xyz, vec4 rgba)
{
	vec2 tc = vec2(frag_xyz.x / viewport_dims.x, frag_xyz.y / viewport_dims.y);
	float depth = texture(depth_tex, tc).r;
	if (depth < frag_xyz.z)
		return false;

	// Write into linked list buffer
	int node_addr = int(atomicCounterIncrement(node_buffer_counter));

	ivec2 pixel_coords = ivec2(frag_xyz.xy);
	int pixel_index = pixel_coords.x + viewport_dims.x * pixel_coords.y;

	if (node_addr >= viewport_dims.x * viewport_dims.y * nodes_per_pixel) {
		return false;
	}
	int old_node_addr = atomicExchange(head_ptrs[pixel_index], node_addr);
	uint compressed_color = packUnorm4x8(rgba);
	Node current_node = Node(compressed_color, frag_xyz.z, old_node_addr);
	nodes[node_addr] = current_node;
	return true;
}