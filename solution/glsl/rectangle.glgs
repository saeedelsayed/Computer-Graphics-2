#version 330 core

#define PLOT_MODE 0

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

uniform float pixel_blend     = 0.0;
uniform float viewport_height = 1.0;

in RECTANGLE_GS {
	mat4  modelview;
	vec3  normal_eye;
	vec2  extent;
	vec4  color;
	vec4  secondary_color;
	vec4  border_color;
	float percentual_border_width;
	float border_width_in_pixel; 
	int   border_mode;
	vec4  texcoord;
	float depth_offset;
} gi[];

out RECTANGLE_FS {
	vec3 position_eye;
	vec3 normal_eye;
	vec2 texcoord;
	vec4 color;
	vec4 secondary_color;
	vec4 border_color;
	float depth_offset;
	flat int side; // 0 is back facing and 1 is front facing
	vec2 splatcoord;
	vec2 percentual_splat_size;
	vec2 percentual_blend_width;
	vec2 percentual_rectangle_size;
	vec2 percentual_core_size;
} fo;

//***** begin interface of side.glsl ***********************************
bool keep_this_side(in vec3 position, in vec3 normal, out int side);
void update_material_color_and_transparency(inout vec3 mat_color, inout float transparency, in int side, in vec4 color);
void update_normal(inout vec3 normal, in int side);
//***** end interface of side.glsl ***********************************

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

void emit_corner(in vec3 corner_eye, in vec2 texcoord, in vec2 uv)
{
	fo.position_eye = corner_eye;
	fo.texcoord = texcoord;
	fo.splatcoord = uv;
	// compute position in clip space
	gl_Position	= get_projection_matrix() * vec4(corner_eye, 1.0);
	EmitVertex();
}

void main()
{
	if (gi[0].depth_offset > 100000.0)
		return;
	fo.depth_offset = gi[0].depth_offset;
	fo.color        = gi[0].color;
	fo.secondary_color = gi[0].secondary_color;
	fo.border_color = gi[0].border_color;
	fo.normal_eye   = gi[0].normal_eye;
	
	vec3 position_eye = (gi[0].modelview*gl_in[0].gl_Position).xyz;
	vec3 dx_eye = 0.5*gi[0].extent.x*gi[0].modelview[0].xyz;
	vec3 dy_eye = 0.5*gi[0].extent.y*gi[0].modelview[1].xyz;
	vec2 extent_eye;
	extent_eye.x = 2.0*length(dx_eye);
	extent_eye.y = 2.0*length(dy_eye);
	extent_eye = gi[0].extent;
	// determine side in eye space and check for culling
	if (!keep_this_side(position_eye.xyz, fo.normal_eye, fo.side))
		return;

	// compute extent of a pixel at point depth in eye coordinates
	float pixel_extent = 2.0*abs(position_eye.z/(viewport_height*get_projection_matrix()[1][1]));
	vec2 perc_border_width = vec2(gi[0].percentual_border_width);
	/// 0 ... separate, 1 ... width is reference, 2 ... height is reference, 3 ... min(width,height) is reference
	switch (gi[0].border_mode) {
	case 1: 
		perc_border_width.y *= gi[0].extent.x / gi[0].extent.y;
		break;
	case 2:
		perc_border_width.x *= gi[0].extent.y / gi[0].extent.x;
		break;
	case 3:
		if (gi[0].extent.x < gi[0].extent.y)
			perc_border_width.y *= gi[0].extent.x / gi[0].extent.y;
		else
			perc_border_width.x *= gi[0].extent.y / gi[0].extent.x;
		break;
	}
	vec2 perc_pixel_extent = pixel_extent / extent_eye;
	fo.percentual_blend_width = pixel_blend * perc_pixel_extent;
	vec2 percentual_border_size =
	(gi[0].percentual_border_width*gi[0].border_width_in_pixel >= 0.0) ?
		max(abs(perc_border_width), abs(gi[0].border_width_in_pixel*perc_pixel_extent)) :
		abs(perc_border_width - gi[0].border_width_in_pixel * perc_pixel_extent);
	// compute point radius possibly extended by positive halo width
	fo.percentual_rectangle_size = vec2(1.0) + max(vec2(0.0), max(perc_border_width, gi[0].border_width_in_pixel*perc_pixel_extent));
	// compute core size
	fo.percentual_core_size = fo.percentual_rectangle_size - percentual_border_size;
	// compute scaling factor to get splat radius
	fo.percentual_splat_size = fo.percentual_rectangle_size + 2.0*fo.percentual_blend_width;
	// compute splat parameters in x and y direction
	dx_eye *= fo.percentual_splat_size.x;
	dy_eye *= fo.percentual_splat_size.y;
	// generate splat vertices
	vec4 tc = gi[0].texcoord;
	if (tc.x < -1.0) { // decode whether texture should be rotated by 90 degrees
		tc.x += 3.0;
		vec2 tc_ctr = 0.5*(tc.xy + tc.zw);
		vec2 tc_D   = 0.5*fo.percentual_splat_size*(tc.zw - tc.xy);
		tc.xy = tc_ctr - tc_D;
		tc.zw = tc_ctr + tc_D;
		emit_corner(position_eye-dx_eye-dy_eye, vec2(tc.zy), -fo.percentual_splat_size);
		emit_corner(position_eye-dx_eye+dy_eye, vec2(tc.xy), vec2(-fo.percentual_splat_size.x, fo.percentual_splat_size.y));
		emit_corner(position_eye+dx_eye-dy_eye, vec2(tc.zw), vec2(fo.percentual_splat_size.x, -fo.percentual_splat_size.y));
		emit_corner(position_eye+dx_eye+dy_eye, vec2(tc.xw), fo.percentual_splat_size);
	}
	else {
		vec2 tc_ctr = 0.5*(tc.xy + tc.zw);
		vec2 tc_D   = 0.5*fo.percentual_splat_size*(tc.zw - tc.xy);
		tc.xy = tc_ctr - tc_D;
		tc.zw = tc_ctr + tc_D;

#if PLOT_MODE == 1
		fo.depth_offset = gi[0].depth_offset - 0.000005f;
#endif
		emit_corner(position_eye-dx_eye-dy_eye, vec2(tc.xy), -fo.percentual_splat_size);
#if PLOT_MODE == 1
		fo.depth_offset = gi[0].depth_offset - 0.000005f;
#endif
		emit_corner(position_eye-dx_eye+dy_eye, vec2(tc.xw), vec2(-fo.percentual_splat_size.x, fo.percentual_splat_size.y));
#if PLOT_MODE == 1
		fo.depth_offset = gi[0].depth_offset + 0.000005f;
#endif
		emit_corner(position_eye+dx_eye-dy_eye, vec2(tc.zy), vec2(fo.percentual_splat_size.x, -fo.percentual_splat_size.y));
#if PLOT_MODE == 1
		fo.depth_offset = gi[0].depth_offset + 0.000005f;
#endif
		emit_corner(position_eye+dx_eye+dy_eye, vec2(tc.zw), fo.percentual_splat_size);

	}
}
