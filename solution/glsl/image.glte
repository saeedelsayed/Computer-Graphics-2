#version 430

layout(quads, fractional_odd_spacing) in;

in vec4 patch_position[];
in vec2 patch_tex_coord[];
in vec4 patch_color[];

out vec2 tc;
out vec4 color_fs;

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

uniform float cx = 0.0;
uniform float cy = 0.0;
uniform float s = 1.0;

uniform float k1 = 0.0;
uniform float k2 = 0.0;
uniform float k3 = 0.0;
uniform float k4 = 0.0;
uniform float k5 = 0.0;
uniform float k6 = 0.0;
uniform float p1 = 0.0;
uniform float p2 = 0.0;

vec2 L(in vec2 pd)
{
	float r2 = dot(pd,pd);
	float f = (1.0+r2*(k1+r2*(k2+r2*k3)))/(1.0+r2*(k4+r2*(k5+r2*k6)));
	float xy2 = 2.0*pd.x*pd.y;
	return f*pd+p1*vec2(xy2,r2+2.0*pd.y*pd.y)+p2*vec2(2.0*pd.x*pd.x+r2,xy2);
}

void main()
{
	//vec3 b = gl_TessCoord;
	//gl_Position = get_modelview_projection_matrix()*(b[0]*patch_position[0]+b[1]*patch_position[1]+b[2]*patch_position[2]);
	//tc = b[0]*patch_tex_coord[0]+b[1]*patch_tex_coord[1]+b[2]*patch_tex_coord[2];
	//color_fs = b[0]*patch_color[0]+b[1]*patch_color[1]+b[2]*patch_color[2];

	vec2 bilinear = gl_TessCoord.xy;
	vec4 pos = (1.0 - bilinear.y)*( (1.0 - bilinear.x) * patch_position[0] + bilinear.x*patch_position[1] )+
			   bilinear.y *( (1.0 - bilinear.x) * patch_position[3] + bilinear.x*patch_position[2] );
	pos.xy = s*L(pos.xy-vec2(cx,cy))+vec2(cx,cy);
	gl_Position = get_modelview_projection_matrix()*pos;
	tc =
	(1.0 - bilinear.y)*( (1.0 - bilinear.x) * patch_tex_coord[0] + bilinear.x*patch_tex_coord[1] )+
	       bilinear.y *( (1.0 - bilinear.x) * patch_tex_coord[3] + bilinear.x*patch_tex_coord[2] );
	color_fs =
	(1.0 - bilinear.y)*( (1.0 - bilinear.x) * patch_color[0] + bilinear.x*patch_color[1] )+
	       bilinear.y *( (1.0 - bilinear.x) * patch_color[3] + bilinear.x*patch_color[2] );
}