#version 430

/*
	0 : COPY_DATA (rearranges the data buffer while compacting)
	1 : CREATE_INDICES (creates indices that point to the compacted data elements)
*/
#define MODE 0
#define DATA_TYPE_DEFINITION float x; float y; float z;

layout(local_size_x = 256) in;

struct data_type {
	DATA_TYPE_DEFINITION
};

layout(std430, binding = 0) readonly buffer data_in_buffer {
    data_type data_in[];
};

layout(std430, binding = 1) writeonly buffer data_out_buffer {
#if MODE == 0
    data_type data_out[];
#else
	uint data_out[];
#endif
};

layout(std430, binding = 2) readonly buffer votes_buffer {
    uint votes[];
};

layout(std430, binding = 3) readonly buffer prefix_sums_buffer {
    uint last_sum;
    uint p0, p1, p2; // padding
    uint prefix_sums[];
};

layout(std430, binding = 4) readonly buffer block_sums_buffer {
    uint block_sums[];
};

uniform uint n; // total number of items to sort

void main() {

	uint tid = gl_LocalInvocationID.x;
	uint wid = gl_WorkGroupID.x;

	uint bid = wid;

    for(uint idx = wid*gl_WorkGroupSize.x + tid; idx < n; idx += gl_WorkGroupSize.x*gl_NumWorkGroups.x) {
		uint vote_ballot_idx = idx>>5;
		uint vote_ballot = votes[vote_ballot_idx];
		uint vote_idx = idx&31;

		if(((vote_ballot>>vote_idx)&1) == 1) {
			uint prefix_sum_value = (prefix_sums[idx>>2]>>((idx&3)<<3)) & 0x000000FF;
			uint block_sum_value = block_sums[bid];
			uint addr = prefix_sum_value + block_sum_value;
        
			#if MODE == 0
			data_out[addr] = data_in[idx];
			#else
			data_out[addr] = idx;
			#endif
		}

		bid += gl_WorkGroupSize.x*gl_NumWorkGroups.x;
    }
}
