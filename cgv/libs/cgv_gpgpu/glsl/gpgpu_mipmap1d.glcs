#version 430

layout(local_size_x = 4) in;

layout(binding = 0) uniform sampler1D input_tex;
layout(binding = 1) uniform writeonly image1D output_tex;

uniform uint level;
uniform uint output_size;

vec4 sample_texture(in float coords) {
	
	return textureLod(input_tex, coords, level);
}

void main() {
	
	// the texel coordinates of this thread
    int idx = int(gl_GlobalInvocationID);
    
	// this produces correct results even for odd sized input textures
	if(idx < output_size) {
		float output_size_float = output_size;
		float double_size = 2.0 * output_size_float;

		float fidx = idx / output_size_float;
		float fstep = 1.0 / double_size;
		fidx += 0.5 * fstep;

		vec4 result = vec4(0.0);
		// use texture sampler filtering to average samples
		result += sample_texture(fidx + 0.0);
		result += sample_texture(fidx + fstep);
		
		result /= 2.0;

		imageStore(output_tex, idx, result);
	}
}
