#version 430

#define VALUE_TYPE_DEFINITION uint

layout(local_size_x = 256) in;

layout(std430, binding = 0) readonly buffer keys_in_buffer {
    uint keys_in[];
};

layout(std430, binding = 1) writeonly buffer keys_out_buffer {
    uint keys_out[];
};

layout(std430, binding = 2) readonly buffer values_in_buffer {
    VALUE_TYPE_DEFINITION values_in[];
};

layout(std430, binding = 3) writeonly buffer values_out_buffer {
    VALUE_TYPE_DEFINITION values_out[];
};

layout(std430, binding = 4) readonly buffer prefix_sums_buffer {
    uint prefix_sums[];
};

layout(std430, binding = 5) readonly buffer block_sums_buffer {
    uint block_sums[];
};

layout(std430, binding = 6) readonly buffer last_sum_buffer {
    uint last_sum[];
};

uniform uint n; // total number of items to sort
uniform uint n_block_sums; // total number of blocksums including padding
uniform uint last_block_sum_idx; // last non-padded blocksum index

void main() {

	uint tid = gl_LocalInvocationID.x;
	uint wid = gl_WorkGroupID.x;

	uint count[4];
	uint bucket_sums[4];

	uint last_prefix_sum = last_sum[0];
        
	count[0] = (last_prefix_sum&0x000000FF) + block_sums[last_block_sum_idx];
	last_prefix_sum = last_prefix_sum >> 8;
	count[1] = (last_prefix_sum&0x000000FF) + block_sums[last_block_sum_idx + n_block_sums];
	last_prefix_sum = last_prefix_sum >> 8;
	count[2] = (last_prefix_sum&0x000000FF) + block_sums[last_block_sum_idx + n_block_sums + n_block_sums];
	
	count[last_sum[1]] += 1;

	bucket_sums[0] = 0;
	bucket_sums[1] = count[0];
	bucket_sums[2] = count[0] + count[1];
	bucket_sums[3] = count[0] + count[1] + count[2];
	
	uint bid = wid;

    for(uint idx = wid*gl_WorkGroupSize.x + tid; idx < n; idx += gl_WorkGroupSize.x*gl_NumWorkGroups.x) {
		uint key = keys_in[idx];
        uint bucket = key&3;
        
        uint prefix_sum_value = bitfieldExtract(prefix_sums[idx>>2], int(idx&3)<<3, 8);

		uint block_sum_value = block_sums[bucket * n_block_sums + bid];

        uint scatter_addr = prefix_sum_value + block_sum_value + bucket_sums[bucket];

        keys_out[scatter_addr] = key>>2;
		values_out[scatter_addr] = values_in[idx];

		bid += gl_WorkGroupSize.x*gl_NumWorkGroups.x;
    }
}
