#version 430

//***** begin interface of fragment.glfs ***********************************
uniform float gamma = 2.2;
void finish_fragment(vec4 color);
//***** end interface of fragment.glfs ***********************************

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

// constant defines
#define TRANSPARENCY_THRESHOLD 0.01

// style settings defines
#define NUM_STEPS 128

// 0 - Nearest
// 1 - Smooth
// 2 - Linear
// 3 - Cubic
#define INTERPOLATION_MODE 2
#define ENABLE_NOISE_OFFSET 1
#define ENABLE_LIGHTING 0
#define USE_GRADIENT_TEXTURE 0
#define ENABLE_GRADIENT_MODULATION 0
#define ENABLE_DEPTH_TEST 0

// 0 - Maximum intensity projection
// 1 - Average
// 2 - Blend (transfer function)
#define COMPOSITING_MODE 2

// 0 - None/Disabled
// 1 - Isovalue
// 2 - Alpha Threshold (from transfer function)
#define ISOSURFACE_MODE 0
#define ISOSURFACE_COLOR_MODE 0

// 0 - Disabled
// 1 - Opaque
// 2 - Transparent
#define SLICE_MODE 0

// automatic defines
#define TRANSFER_FUNCTION_SAMPLER_DIMENSIONS 1

// dependent defines
#if ENABLE_LIGHTING == 1 || ENABLE_GRADIENT_MODULATION == 1
	#define USES_GRADIENT
#endif

#if ENABLE_LIGHTING == 1
	#define USES_NORMAL
#endif

// type declarations
struct ray3 {
	vec3 origin;
	vec3 direction;
	float tn, tf;
};

// uniforms
layout (binding = 0) uniform sampler3D volume_tex;
#if TRANSFER_FUNCTION_SAMPLER_DIMENSIONS == 1
layout (binding = 1) uniform sampler1D transfer_function_tex;
#else
layout (binding = 1) uniform sampler2D transfer_function_tex;
#endif
layout (binding = 2) uniform sampler2D noise_tex;
#if ENABLE_LIGHTING == 1 || ENABLE_GRADIENT_MODULATION == 1
layout (binding = 3) uniform sampler3D gradient_tex;
#endif
#if ENABLE_DEPTH_TEST == 1
layout (binding = 4) uniform sampler2D depth_tex;
#endif

uniform vec2  viewport_dims;
uniform vec2  noise_offset;
uniform float scale_adjustment_factor;

uniform bool  light_local_to_eye;
uniform vec3  light_direction;
uniform float ambient_strength;
uniform float diffuse_strength;
uniform float specular_strength;
uniform float specular_exponent;
uniform float specular_color_mix;

uniform float gradient_lambda;

uniform float isovalue;
uniform vec3  isosurface_color;

uniform int   slice_axis;
uniform float slice_coordinate;
uniform float slice_opacity;

uniform vec3  clip_box_min;
uniform vec3  clip_box_max;

// in/out parameters
in vec3 position_object;
in vec3 eye_fs;

vec4 textureNearest(sampler3D tex, vec3 coord) {
	
	ivec3 tex_size = textureSize(tex, 0);
	ivec3 uv = ivec3(coord * tex_size);

	return texelFetch(tex, uv, 0);
}

// smooth filtering based on linear interpolated samples (https://www.shadertoy.com/view/XsfGDn)
vec4 textureSmooth(sampler3D tex, vec3 coord) {
	
	vec3 tex_size = vec3(textureSize(volume_tex, 0));
	vec3 uv = coord * tex_size + 0.5;

	vec3 iuv = floor(uv);
	vec3 fuv = fract(uv);

	uv = iuv + fuv*fuv*(3.0-2.0*fuv); // fuv*fuv*fuv*(fuv*(fuv*6.0-15.0)+10.0);
	uv = (uv - 0.5)/tex_size;

	return textureLod(tex, uv, 0);
}

/*--------------------------------------------------------------------------*\
Copyright (c) 2008-2009, Danny Ruijters. All rights reserved.
http://www.dannyruijters.nl/cubicinterpolation/
This file is part of CUDA Cubic B-Spline Interpolation (CI).
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
*  Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
*  Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
*  Neither the name of the copyright holders nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
The views and conclusions contained in the software and documentation are
those of the authors and should not be interpreted as representing official
policies, either expressed or implied.
When using this code in a scientific project, please cite one or all of the
following papers:
*  Daniel Ruijters and Philippe Thévenaz,
   GPU Prefilter for Accurate Cubic B-Spline Interpolation, 
   The Computer Journal, vol. 55, no. 1, pp. 15-20, January 2012.
   http://dannyruijters.nl/docs/cudaPrefilter3.pdf
*  Daniel Ruijters, Bart M. ter Haar Romeny, and Paul Suetens,
   Efficient GPU-Based Texture Interpolation using Uniform B-Splines,
   Journal of Graphics Tools, vol. 13, no. 4, pp. 61-69, 2008.
\*--------------------------------------------------------------------------*/

// tricubic interpolation function (see copyright notice above)
vec4 textureCubic(sampler3D tex, vec3 coord) {

	// shift the coordinate from [0,1] to [-0.5, tex_size-0.5]
	vec3 tex_size = vec3(textureSize(volume_tex, 0));
	vec3 coord_grid = coord * tex_size - 0.5;
	vec3 index = floor(coord_grid);
	vec3 fraction = coord_grid - index;
	vec3 one_frac = 1.0 - fraction;

	vec3 w0 = 1.0/6.0 * one_frac*one_frac*one_frac;
	vec3 w1 = 2.0/3.0 - 0.5 * fraction*fraction*(2.0-fraction);
	vec3 w2 = 2.0/3.0 - 0.5 * one_frac*one_frac*(2.0-one_frac);
	vec3 w3 = 1.0/6.0 * fraction*fraction*fraction;

	vec3 g0 = w0 + w1;
	vec3 g1 = w2 + w3;
	vec3 mult = 1.0 / tex_size;
	vec3 h0 = mult * ((w1 / g0) - 0.5 + index);  //h0 = w1/g0 - 1, move from [-0.5, nrOfVoxels-0.5] to [0,1]
	vec3 h1 = mult * ((w3 / g1) + 1.5 + index);  //h1 = w3/g1 + 1, move from [-0.5, nrOfVoxels-0.5] to [0,1]

	// fetch the eight linear interpolations
	// weighting and fetching is interleaved for performance and stability reasons
	vec4 tex000 = textureLod(tex, h0, 0);
	vec4 tex100 = textureLod(tex, vec3(h1.x, h0.y, h0.z), 0);
	tex000 = mix(tex100, tex000, g0.x);  //weigh along the x-direction
	vec4 tex010 = textureLod(tex, vec3(h0.x, h1.y, h0.z), 0);
	vec4 tex110 = textureLod(tex, vec3(h1.x, h1.y, h0.z), 0);
	tex010 = mix(tex110, tex010, g0.x);  //weigh along the x-direction
	tex000 = mix(tex010, tex000, g0.y);  //weigh along the y-direction
	vec4 tex001 = textureLod(tex, vec3(h0.x, h0.y, h1.z), 0);
	vec4 tex101 = textureLod(tex, vec3(h1.x, h0.y, h1.z), 0);
	tex001 = mix(tex101, tex001, g0.x);  //weigh along the x-direction
	vec4 tex011 = textureLod(tex, vec3(h0.x, h1.y, h1.z), 0);
	vec4 tex111 = textureLod(tex, h1, 0);
	tex011 = mix(tex111, tex011, g0.x);  //weigh along the x-direction
	tex001 = mix(tex011, tex001, g0.y);  //weigh along the y-direction

	return mix(tex001, tex000, g0.z);  //weigh along the z-direction
}

vec3 central_difference(vec3 coords) {

	float xr = textureOffset(volume_tex, coords, ivec3(+1, 0, 0)).r;
	float xl = textureOffset(volume_tex, coords, ivec3(-1, 0, 0)).r;
	float yr = textureOffset(volume_tex, coords, ivec3(0, +1, 0)).r;
	float yl = textureOffset(volume_tex, coords, ivec3(0, -1, 0)).r;
	float zr = textureOffset(volume_tex, coords, ivec3(0, 0, +1)).r;
	float zl = textureOffset(volume_tex, coords, ivec3(0, 0, -1)).r;

	return 0.5 * vec3(xr - xl, yr - yl, zr - zl);
}

vec3 safe_normalize(vec3 v) {

	float len = length(v);
	return len > 0.000001 ? v/len : vec3(0.0);
}

vec3 safe_divide(vec3 v, float denom) {

	return denom > 0.000001 ? v/denom : vec3(0.0);
}

vec3 object_space_view_dir(vec3 v) {

    return eye_fs - v;
}

float get_density(in vec3 uvw) {
#if (INTERPOLATION_MODE == 0)
	return textureNearest(volume_tex, uvw).r;
#elif (INTERPOLATION_MODE == 1)
	return textureSmooth(volume_tex, uvw).r;
#elif (INTERPOLATION_MODE == 2)
	return textureLod(volume_tex, uvw, 0).r;
#else
	return textureCubic(volume_tex, uvw).r;
#endif
	return textureLod(volume_tex, uvw, 0).r;
}

vec4 apply_transfer_function(in float density) {
#if TRANSFER_FUNCTION_SAMPLER_DIMENSIONS == 1
	return texture(transfer_function_tex, density);
#else
	return texture(transfer_function_tex, vec2(density, 0.5f));
#endif
}

#ifdef USES_GRADIENT
vec3 get_gradient(in vec3 uvw) {
	// calculate the gradient on-the-fly via central differences
	#if USE_GRADIENT_TEXTURE == 0
	return central_difference(uvw);
	#else
	// get the gradient from a precomputed gradient texture
	return texture(gradient_tex, uvw).xyz;
	#endif
}
#endif

#if ENABLE_LIGHTING == 1
vec3 calculate_lighting(vec3 view_dir, vec3 normal, vec3 light_dir) {

    float diffuse = max(dot(normal, light_dir), 0.0);
	
	vec3 half_dir = normalize(light_dir + view_dir);
	float specular = pow(max(dot(normal, half_dir), 0.0), specular_exponent);
	specular *= diffuse;
	
    return vec3(ambient_strength.x, diffuse * diffuse_strength, specular * specular_strength);
}

vec3 apply_lighting(vec3 color, vec3 lighting) {

	vec3 illuminated_color = (lighting.x + lighting.y) * color;
	illuminated_color += mix(vec3(1.0f), color, specular_color_mix) * lighting.z;
	return illuminated_color;
}
#endif

bool intersect_box(in vec3 a, in vec3 b, in vec3 origin, in vec3 direction, out float t_min, out float t_max) {

	vec3 inv_dir = 1.0 / direction;

	float t1 = (a.x - origin.x)*inv_dir.x;
	float t2 = (b.x - origin.x)*inv_dir.x;

	t_min = min(t1, t2);
	t_max = max(t1, t2);

	t1 = (a.y - origin.y)*inv_dir.y;
	t2 = (b.y - origin.y)*inv_dir.y;

	t_min = max(t_min, min(t1, t2));
	t_max = min(t_max, max(t1, t2));

	t1 = (a.z - origin.z)*inv_dir.z;
	t2 = (b.z - origin.z)*inv_dir.z;

	t_min = max(t_min, min(t1, t2));
	t_max = min(t_max, max(t1, t2));

	return t_max > max(t_min, 0.0f);
}

bool get_ray(in vec3 bbox_min, in vec3 bbox_max, in float step_size, out ray3 ray) {
	
	vec2 frag_tex_coords = gl_FragCoord.xy / viewport_dims;

	ray.origin = eye_fs;
	ray.direction = -normalize(eye_fs - position_object);

	// test if ray intersects the volume bounding box, if not return false
	if(!intersect_box(bbox_min, bbox_max, ray.origin, ray.direction, ray.tn, ray.tf))
		return false;

	// make sure the ray origin is not moved behind the eye position
	ray.tn = max(ray.tn, 0.0);

#if ENABLE_DEPTH_TEST == 1
	float depth = texture(depth_tex, frag_tex_coords).r;
	
	vec4 clip_space_pos = vec4(2.0 * frag_tex_coords - 1.0, 2.0 * depth - 1.0, 1.0);

	vec4 object_space_pos = get_inverse_modelview_projection_matrix() * clip_space_pos;
	object_space_pos /= object_space_pos.w;

	// the ray end distance is the minimum between the distance from the eye to the volume bounding box position or the depth buffer position
	ray.tf = min(ray.tf, length(eye_fs - object_space_pos.xyz));
#endif
	
	// discretize the ray start and end distances onto positions that are step_size apart (prevents artifacts when looking at bounding box edges and corners)
	ray.tn = step_size * round(ray.tn / step_size);
	ray.tf = step_size * round(ray.tf / step_size);

	// update the ray origin as it may have changed
	ray.origin += ray.tn * ray.direction;

	// transform position to texture coordinates: [-0.5,0.5] -> [0.0,1.0]
	ray.origin += 0.5;

#if ENABLE_NOISE_OFFSET == 1
	// add a small offset noise to the ray start position to prevent ring artifacts
	vec2 noise_uv = (frag_tex_coords + noise_offset) * textureSize(noise_tex, 0);
	ray.origin += (2.0 * ray.direction * step_size) * (texture(noise_tex, noise_uv).r + (noise_offset.x * noise_offset.y));
#endif
	
	return true;
}

void main() {

	const float step_size = 1.732051 / NUM_STEPS;
	//float step_size = length(bbox_extent) / NUM_STEPS;
	
	//vec3 box_min = bbox_center - 0.5*bbox_extent;
	//vec3 box_max = bbox_center + 0.5*bbox_extent;
	
	ray3 ray;
	if(!get_ray(vec3(-0.5), vec3(0.5), step_size, ray)) {
	//if(!get_ray(box_min, box_max, step_size, ray)) {
		finish_fragment(vec4(0.0, 0.0, 0.0, 0.0));
		return;
	}

#if ENABLE_LIGHTING == 1
	// TODO: make this use the framework lighting system?	
	vec3 light_dir = light_local_to_eye ?
		normalize((get_inverse_modelview_matrix() * vec4(light_direction, 0.0)).xyz) : // light is local to eye position/static to window
		light_direction; // light is static to scene
#endif

	// ray start and end distance delta
	float dt = ray.tf - ray.tn;
	// initial color with full transparency for front-to-back blending
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	// step count (needed later for averaging the density if using average compositing mode)
#if SLICE_MODE > 0
	bool initial_side_slice = mix(clip_box_min, clip_box_max, ray.origin)[slice_axis] > slice_coordinate;
#endif
	int istep = 0;
	for(istep; istep < NUM_STEPS; ++istep) {
		float t = istep * step_size;
		
		if(t > dt)
			break;

		// calculate the current ray position
		vec3 pos = ray.origin + t*ray.direction;

		// transform pos from [0,1] to uvw texture coordinate range given by [clip_box_min,clip_box_max] to allow rendering only part of the volume
		vec3 uvw = mix(clip_box_min, clip_box_max, pos);

		float density = get_density(uvw);

#if COMPOSITING_MODE == 0

		// red channel stores the maximum density
		color.r = max(color.r, density);

#elif COMPOSITING_MODE == 1

		// red channel stores the accumulated density
		color.r += density;

#else

		// apply the transfer function
		vec4 color_in = apply_transfer_function(density);
	#if ISOSURFACE_MODE > 0
		#if ISOSURFACE_MODE == 1
			bool is_isosurface = density >= isovalue;
		#else
			bool is_isosurface = color_in.a >= isovalue;
		#endif
	#endif

		float opacity_modulation = 1.0;

	#ifdef USES_GRADIENT
		vec3 gradient = get_gradient(uvw);
		float gradient_length = length(gradient);
	#endif

	#ifdef USES_NORMAL
		// get the normal as the reversed normalized gradient
		vec3 normal = -safe_divide(gradient, gradient_length);
	#endif

	#if ENABLE_LIGHTING == 1
		// only compute lighting if the sample passes the opacity threshold or is on an isosurface
		vec3 illumination =
			#if ISOSURFACE_MODE > 0
				(color_in.a > TRANSPARENCY_THRESHOLD || is_isosurface) ?
			#else
				color_in.a > TRANSPARENCY_THRESHOLD ?
			#endif
			calculate_lighting(-ray.direction, normal, light_dir) : vec3(0.0);
	#endif

	#if ENABLE_GRADIENT_MODULATION == 1
		opacity_modulation = pow(gradient_length, gradient_lambda);
	#endif
	#if ISOSURFACE_MODE > 0
		if(is_isosurface) {
			#if ISOSURFACE_COLOR_MODE == 0
				color_in = vec4(isosurface_color, 1.0);
			#endif
			
			#if ENABLE_LIGHTING == 1
				color_in.rgb = apply_lighting(color_in.rgb, illumination);
			#endif

			color.rgb = color.a*color_in.rgb + color.rgb;
			color.a = 0.0;

			break;
		}
	#endif
	#if SLICE_MODE > 0
		bool at_slice = ((uvw[slice_axis] > slice_coordinate) != initial_side_slice);
		if (at_slice) {
	#if SLICE_MODE == 1
			color_in.a = 1.0;
	#else
			color_in.a = slice_opacity;
	#endif
			initial_side_slice = !initial_side_slice;
		}
		else {
	#endif
	#if ENABLE_LIGHTING == 1
			color_in.rgb = apply_lighting(color_in.rgb, illumination);
	#endif

			// apply opacity modulation as determined by gradient length if enabled
			color_in.a *= opacity_modulation;

			color_in.a = -exp(-step_size * scale_adjustment_factor * color_in.a) + 1.0;
	#if SLICE_MODE > 0
		}
	#endif
		// premultiply alpha
		color_in.rgb *= color_in.a;

		// blend front-to-back
		color.rgb += color.a*color_in.rgb;
		color.a *= (1.0 - color_in.a);

		// early termination when transparency threshold is reached
	#if ENABLE_ISOSURFACE == 0
		if(color.a < TRANSPARENCY_THRESHOLD) {
			color.a = 0.0;
			break;
		}
	#endif
	#if SLICE_MODE == 1
		if (at_slice) {
			break;
		}
	#endif
#endif
	}

#if COMPOSITING_MODE == 0

	color = vec4(color.r);

#elif COMPOSITING_MODE == 1

	float average_density = istep > 0 ? color.r / float(istep) : 0.0;

	average_density = -exp(-scale_adjustment_factor * average_density) + 1.0;

	color = vec4(average_density);

#else

	// convert transparency to opacity
	color.a = 1.0 - color.a;
	
#endif

	finish_fragment(color);
}

/*void main()
{
	const float step_size = 1.732051 / NUM_STEPS;
	vec2 frag_tex_coords = gl_FragCoord.xy / viewport_dims;

#if ENABLE_LIGHTING == 1
	// TODO: make this use the framework lighting system?
	
	// light is static to scene
	vec3 light_dir = light_direction;

	// light is local to eye position/static to window
	if(light_local_to_eye)
		light_dir = normalize((get_inverse_modelview_matrix() * vec4(light_direction, 0.0)).xyz);
#endif

	vec3 ray_org = position_object;
	vec3 eye_pos = eye_fs;

#if ENABLE_DEPTH_TEST == 0
	ray_org = position_object;
#else
	float depth = texture(depth_tex, frag_tex_coords).r;
	
	vec4 clip_space_pos = vec4(2.0 * frag_tex_coords - 1.0, 2.0 * depth - 1.0, 1.0);

	vec4 object_space_pos = get_inverse_modelview_projection_matrix() * clip_space_pos;
	object_space_pos /= object_space_pos.w;

	vec3 pos_to_eye = position_object - eye_pos;
	vec3 depth_pos_to_eye = object_space_pos.xyz - eye_pos;

	if(dot(pos_to_eye, pos_to_eye) >= dot(depth_pos_to_eye, depth_pos_to_eye))
		ray_org = object_space_pos.xyz;
#endif

	vec3 ray_dir = normalize(object_space_view_dir(position_object));
	
	float t1, t2;
	bool intersection = intersect_box(ray_org, ray_dir, t1, t2);

	// test if ray intersects both boxes and return transparent fragment if not
	if(!intersection) {
		finish_fragment(vec4(0.0, 0.0, 0.0, 0.0));
		return;
	}

	// ray end point may lie behind the eye position
	// take the minimum of the distances to the eye and ray end position
	float te = length(eye_pos - ray_org);
	t2 = min(t2, te);

	// make sure the ray origin is not moved further back (important when depth testing is enabled)
	t1 = max(t1, 0.0);

	// update the ray origin as it may have changed
#if FRONT_TO_BACK == 1
	// front-to-back
	ray_org += t2*ray_dir;
	ray_dir = -ray_dir;
#else
	// back-to-front
	ray_org += t1*ray_dir;
#endif

	// transform position to texture coordinates: [-0.5,0.5] -> [0.0,1.0]
	ray_org += 0.5;

#if ENABLE_NOISE_OFFSET == 1
	// add a small offset noise to the ray start position to prevent ring artifacts
	vec2 noise_uv = (frag_tex_coords + noise_offset) * textureSize(noise_tex, 0);
	ray_org += (2.0 * ray_dir * step_size) * (texture(noise_tex, noise_uv).r + (noise_offset.x * noise_offset.y));
#endif

#if COMPOSITING_MODE == 0
	float max_density = 0.0;
#elif COMPOSITING_MODE == 1
	float average_density = 0.0;
#else
	#if FRONT_TO_BACK == 0
	// back-to-front
	vec4 color = vec4(0.0);
	#else
	// front-to-back
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	#endif
#endif

	float dt = t2 - t1;

	int istep = 0;
	for(istep; istep < NUM_STEPS; ++istep) {
		// calculate the current ray position
		float t = istep * step_size;
		vec3 pos = ray_org + t*ray_dir;

		if(t >= dt)
			break;

		// transform pos from [0,1] to range given by [clip_box_min,clip_box_max] to allow rendering only part of the volume
		vec3 uvw = mix(clip_box_min, clip_box_max, pos);

		float density = get_density(uvw);

#if COMPOSITING_MODE == 0

		max_density = max(max_density, density * opacity_scale);

#elif COMPOSITING_MODE == 1

		average_density += density * opacity_scale;

#else

		// apply the transfer function
		vec4 color_in = apply_transfer_function(density);

	#if ISOSURFACE_MODE > 0
		#if ISOSURFACE_MODE == 1
		bool is_isosurface = density >= isovalue;
		#else
		bool is_isosurface = color_in.a >= isovalue;
		#endif
	#endif

	float opacity_modulation = 1.0;

	#if ENABLE_LIGHTING == 1 || ENABLE_GRADIENT_MODULATION == 1
		vec3 gradient = get_gradient(uvw);
		float gradient_length = length(gradient);
	#endif

	#if ENABLE_LIGHTING == 1
		// get the normal as the reversed normalized gradient
		vec3 normal = -safe_divide(gradient, gradient_length);

		// get the view_direction based on the sampling direction
		#if FRONT_TO_BACK == 1
		vec3 view_dir = -ray_dir;
		#else
		vec3 view_dir = ray_dir;
		#endif

		// only compute lighting if the sample passes the opacity threshold or is on an isosurface
		
		vec3 illumination =
			#if ISOSURFACE_MODE > 0
			(color_in.a > 0.05 || is_isosurface) ?
			#else
			color_in.a > 0.05 ?
			#endif
			calculate_lighting(view_dir, normal, light_dir) : vec3(0.0);
	#endif

	#if ENABLE_GRADIENT_MODULATION == 1
		opacity_modulation = pow(gradient_length, gradient_lambda);
	#endif

	#if ISOSURFACE_MODE > 0
		if(is_isosurface) {
			#if ISOSURFACE_COLOR_MODE == 0
			color_in = vec4(isosurface_color, 1.0);
			#endif
			
			#if ENABLE_LIGHTING == 1
			color_in.rgb = apply_lighting(color_in.rgb, illumination);
			#endif

			color.rgb = color.a*color_in.rgb + color.rgb;
			color.a = 0.0;

			break;
		}
	#endif

	#if ENABLE_LIGHTING == 1
		color_in.rgb = apply_lighting(color_in.rgb, illumination);
	#endif

		// apply opacity modulation as determined by gradient length if enabled
		color_in.a *= opacity_modulation;

		// scale the alpha channel based on the global opacity scale
		color_in.a *= opacity_scale;

	#if ENABLE_SCALE_ADJUSTMENT == 1
		color_in.a = -exp(-step_size * size_scale * color_in.a) + 1.0;
	#else
		color_in.a = -exp(-color_in.a) + 1.0;
	#endif

		// premultiply alpha
		color_in.rgb *= color_in.a;

	#if FRONT_TO_BACK == 0
		// blend back-to-front
		color = color_in + (1.0 - color_in.a)*color;
	#else
		// blend front-to-back
		color.rgb = color.a*color_in.rgb + color.rgb;
		color.a = (1.0 - color_in.a)*color.a;

		// early termination when alpha threshold is reached
#if ENABLE_ISOSURFACE == 0
		if(color.a < 0.003) {
			color.a = 0.0;
			break;
		}
#endif
	#endif
#endif
	}

#if COMPOSITING_MODE == 0
	finish_fragment(vec4(max_density));
#elif COMPOSITING_MODE == 1
	average_density /= float(istep);

#if ENABLE_SCALE_ADJUSTMENT == 1
	average_density  = -exp(-size_scale * average_density ) + 1.0;
#endif

	finish_fragment(vec4(average_density));
#else

	#if FRONT_TO_BACK == 1
	color.a = 1.0 - color.a;
	#endif

	finish_fragment(color);
#endif
}
*/