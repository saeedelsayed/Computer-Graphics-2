#version 150
#extension GL_EXT_geometry_shader4 : enable

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

uniform bool measure_point_size_in_pixel;
uniform float reference_point_size;

uniform bool orient_splats;
uniform float pixel_extent_per_depth;

uniform float blend_width_in_pixel = 1.0;
uniform float halo_width_in_pixel = 0.0;
uniform float percentual_halo_width = 0.0;

uniform float surface_offset;

in vec3 normal_gs[];
in vec4 color_gs[];

out vec3 normal;
out vec2 uv;
out vec4 color_fs;
out vec3 position;

out float percentual_blend_width;
out float percentual_core_size;
out float percentual_point_size;
out float percentual_splat_size;

flat out int   side; // 0 is back facing and 1 is front facing

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of side.glsl ***********************************
bool keep_this_side(in vec3 position, in vec3 normal, out int side);
void update_material_color_and_transparency(inout vec3 mat_color, inout float transparency, in int side, in vec4 color);
void update_normal(inout vec3 normal, in int side);
//***** end interface of side.glsl ***********************************

//***** begin interface of splat.glsl ***********************************
void prepare_splat(
	in float reference_point_radius, in float pixel_extent,
	in float blend_width_in_pixel, in float halo_width_in_pixel, in float percentual_halo_width,
	out float percentual_core_size, out float percentual_point_size,
	out float percentual_blend_width, out float percentual_splat_size);
//***** end interface of surface.glsl ***********************************

void emit_corner(in vec3 corner, in float u, in float v)
{
	position = corner;

	uv = vec2(u,v);

	// compute position in clip space
	gl_Position	   = get_projection_matrix() * vec4(position,1.0);

	EmitVertex();
}

void main()
{
	// set color to color attribute
	color_fs = color_gs[0];
	// transform normal to eye space
	normal = normalize(get_normal_matrix()*normal_gs[0]);
	// transform position to eye space
	vec4 P = get_modelview_matrix()*gl_PositionIn[0];
	// apply positional offset in normal direction before w-clip
	P.xyz += surface_offset * normal;
	vec3 position_eye = P.xyz / P.w;
	// determine side in eye space and check for culling
	if (!keep_this_side(position_eye, normal, side))
		return;
	// compute percentual size of splat and its radius
	float depth = abs(position_eye.z);
	// compute extent of a pixel at point depth in eye coordinates
	float pixel_extent = pixel_extent_per_depth * depth;
	// compute point radius from input point size
	float reference_point_radius = 0.5 * gl_in[0].gl_PointSize * (measure_point_size_in_pixel ? pixel_extent : reference_point_size);
	// compute splat parameters for fragment shader
	prepare_splat(reference_point_radius, pixel_extent,
	    blend_width_in_pixel, halo_width_in_pixel, percentual_halo_width,
		percentual_core_size, percentual_point_size,
		percentual_blend_width, percentual_splat_size);
	// compute radius of splat
	float splat_radius = reference_point_radius * percentual_splat_size;
	// compute splat base vectors and scale by splat radius
	vec3 dx = vec3(1.0 ,0.0, 0.0);
	vec3 dy = vec3(0.0, 1.0, 0.0);
	// optionally orient in tangential space
	if (orient_splats) {
		dx = normalize(cross(dy, normal));
		dy = cross(normal, dx);
	}
	dx *= splat_radius;
	dy *= splat_radius;
	// generate splat vertices
	emit_corner(position_eye + dx - dy,  percentual_splat_size, -percentual_splat_size);
	emit_corner(position_eye + dx + dy,  percentual_splat_size,  percentual_splat_size);
	emit_corner(position_eye - dx - dy, -percentual_splat_size, -percentual_splat_size);
	emit_corner(position_eye - dx + dy, -percentual_splat_size,  percentual_splat_size);
}
