#version 330

uniform float size_scale = 1.0;

layout(location = 0) in vec4 position;
layout(location = 1) in vec4 color;
layout(location = 2) in vec3 size;
layout(location = 3) in vec4 orientation;

out vec3 center;
out vec4 color_gs;
out mat3 T;

//***** begin interface of quaternion.glsl ***********************************
vec4 unit_quaternion();
vec3 rotate_vector_with_quaternion(in vec3 preimage, in vec4 q);
vec3 inverse_rotate_vector_with_quaternion(in vec3 v, in vec4 q);
void quaternion_to_axes(in vec4 q, out vec3 x, out vec3 y, out vec3 z);
void quaternion_to_matrix(in vec4 q, out mat3 M);
void rigid_to_matrix(in vec4 q, in vec3 t, out mat4 M);
//***** end interface of quaternion.glsl ***********************************

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

mat3 construct_tensor(in vec3 size, in vec4 orientation)
{
	mat3 R;
	quaternion_to_matrix(orientation, R);
	mat3 S = mat3(size_scale);
	S[0].x *= size.x;
	S[1].y *= size.y;
	S[2].z *= size.z;
	return R * S * transpose(R);
}

void main()
{
	center = position.xyz;
	color_gs = color;
	T = construct_tensor(size, orientation);
}