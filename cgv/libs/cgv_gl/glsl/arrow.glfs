#version 330 core

in vec3 position;
in vec3 p0_fs;
in vec3 pm_fs;
in vec3 p1_fs;
in vec4 color_fs;
in float radius_fs;
in float head_radius_fs;

layout(location = 1) out vec4 frag_position;
layout(location = 2) out vec3 frag_normal;

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of fragment.glfs ***********************************
uniform float gamma = 2.2;
void finish_fragment(vec4 color);
//***** end interface of fragment.glfs ***********************************

//***** begin interface of surface.glsl ***********************************
vec4 compute_reflected_appearance(vec3 position_eye, vec3 normal_eye, vec4 color, int side);
vec4 compute_reflected_appearance_texture(vec3 position_eye, vec3 normal_eye, vec2 texcoords, vec4 color, int side);
//***** end interface of surface.glsl ***********************************

//***** begin interface of side.glsl ***********************************
bool keep_this_side(in vec3 position, in vec3 normal, out int side);
void update_material_color_and_transparency(inout vec3 mat_color, inout float transparency, in int side, in vec4 color);
void update_normal(inout vec3 normal, in int side);
//***** end interface of side.glsl ***********************************

float dot2(vec3 v) {
	return dot(v, v);
}

// https://www.shadertoy.com/view/4lcSRn
float intersect_cylinder(in vec3 org, in vec3 dir, in vec3 pa, in vec3 pb, in float ra, out vec3 normal) {

    vec3 ba = pb-pa;

    vec3 oc = org - pa;

    float baba = dot(ba, ba);
    float bard = dot(ba, dir);
    float baoc = dot(ba, oc);
    
    float k2 = baba              - bard*bard;
    float k1 = baba*dot(oc, dir) - baoc*bard;
    float k0 = baba*dot(oc, oc)  - baoc*baoc - ra*ra*baba;
    
    float h = k1*k1 - k2*k0;
    if(h < 0.0)
		return -1e20;

    h = sqrt(h);
    float t = (-k1-h)/k2;

    // body
    float y = baoc + t*bard;
    if(y > 0.0 && y < baba) {
		normal = (oc+t*dir - ba*y/baba)/ra;
		return t;
	}
    
    // caps
    t = ( ((y<0.0) ? 0.0 : baba) - baoc)/bard;
    if(abs(k1+k2*t) < h) {
		normal = ba*sign(y)/baba;
        return t;
    }

    return -1e20;
}

// https://www.shadertoy.com/view/llcfRf
float intersect_cone(in vec3 org, in vec3 dir, in vec3 pa, in vec3 pb, in float ra, out vec3 normal, out float l) {

	vec3 ba = pb - pa;
    vec3 oa = org - pa;
    vec3 ob = org - pb;
    
    float m0 = dot(ba, ba);
    float m1 = dot(oa, ba);
    float m2 = dot(ob, ba); 
    float m3 = dot(dir, ba);
	float ra2 = ra*ra;

    //cap
    if(m1 < 0.0) {
		if(dot2(oa*m3-dir*m1) < (ra2*m3*m3)) {
			l = 0.0;
			normal = -ba*inversesqrt(m0);
			return -m1/m3;
		}
	}
    
    // body
    float m4 = dot(dir, oa);
    float m5 = dot(oa, oa);
	float m02 = m0*m0;
    float hy = m0 + ra2;
    
    float k2 = m02    - m3*m3*hy;
    float k1 = m02*m4 - m1*m3*hy + m0*ra2*m3;
    float k0 = m02*m5 - m1*m1*hy + m0*ra2*m1*2.0 - m02*ra2;
    
    float h = k1*k1 - k2*k0;
    if(h < 0.0)
		return -1e20;

    float t = (-k1-sqrt(h))/k2;

    float y = m1 + t*m3;
    if(y > 0.0 && y < m0) {
		l = y / m0;
        normal = normalize(m0*(m0*(oa+t*dir)+ra2*ba)-ba*hy*y);
		return t;
    }
    
    return -1e20;
}

void main()
{
	vec3 org = (get_inverse_modelview_matrix() * vec4(0.98*position, 1.0)).xyz;
	vec3 dir = normalize((get_inverse_modelview_matrix() * vec4(normalize(position), 0.0)).xyz);

	vec3 normal, normal_head;
	float l;
	float t = intersect_cylinder(org, dir, p0_fs, pm_fs, radius_fs, normal);
	float t_head = intersect_cone(org, dir, pm_fs, p1_fs, head_radius_fs, normal_head, l);

	if(t_head >= 0.0 && (t_head < t || t < 0.0)) {
		t = t_head;
		normal = normal_head;
	}

	if(t >= 0.0) {
		vec3 hit_pos = org + t * dir;
		vec3 hit_pos_eye = (get_modelview_matrix() * vec4(hit_pos, 1.0)).xyz;
		vec3 normal_eye = normalize(get_normal_matrix() * normal);
		vec4 v_eye = vec4(hit_pos_eye, 1.0);
		vec4 depth = get_projection_matrix() * v_eye;
		
		gl_FragDepth = 0.5*(depth.z / depth.w) + 0.5;

		frag_position = vec4(hit_pos_eye, 1.0);
		frag_normal = normal_eye;

		finish_fragment(compute_reflected_appearance(hit_pos_eye, normal_eye, color_fs, 1));
	} else {
		discard;
	}
}