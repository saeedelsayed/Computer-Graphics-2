#version 150
#extension GL_EXT_geometry_shader4 : enable

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

uniform float pixel_extent_per_depth;

in vec4 color_gs[];
in float point_size_gs[];
in float radius_gs[];
in float linear_depth_gs[];

out vec2 uv;
out vec4 color_fs;

out float percentual_blend_width;
out float percentual_core_size;
out float percentual_point_size;
out float percentual_splat_size;

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************


void emit_corner(in vec3 corner, float u, float v)
{
	uv = vec2(u,v);
	// compute position in clip space
	gl_Position	= get_projection_matrix() * vec4(corner,1.0);
	EmitVertex();
}

void main()
{
	// set color to color attribute
	color_fs = color_gs[0];
	// transform position to eye space
	vec4 p4d = get_modelview_matrix()*gl_PositionIn[0];
	vec3 position_eye = p4d.xyz/p4d.w;
	// compute extent of a pixel at point depth in eye coordinates
	float pixel_extent = pixel_extent_per_depth * abs(position_eye.z);
	// compute radius of splat
	float splat_radius = 0.5 * point_size_gs[0] * pixel_extent;
	// compute splat base vectors
	vec3 dx = vec3(splat_radius ,0.0, 0.0);
	vec3 dy = vec3(0.0, splat_radius, 0.0);
	
	// generate splat vertices
	emit_corner(position_eye + dx - dy, 1.0, -1.0);
	emit_corner(position_eye + dx + dy, 1.0, 1.0);
	emit_corner(position_eye - dx - dy,-1.0, -1.0);
	emit_corner(position_eye - dx + dy,-1.0, 1.0);
}
