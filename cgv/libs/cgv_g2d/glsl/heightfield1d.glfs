#version 430

//***** begin interface of shape2d.glsl ***********************************
uniform vec4 fill_color;
//***** end interface of shape2d.glsl ***********************************

//***** begin interface of fragment2d.glfs ***********************************
void finish_sdf_fragment2d(in float signed_distance, in vec4 color);
void finish_sdf_fragment2d(in float signed_distance, in vec4 color, in vec2 texcoords);
void finish_fragment2d(in vec4 color);
void finish_fragment2d(in vec4 color, in vec2 texcoords);
//***** end interface of fragment2d.glfs ***********************************

uniform layout(binding = 1) sampler1D hist_tex;

uniform uint max_value = 1u;
uniform float norm_gamma = 1.0;
uniform uint sampling_type = 0;

flat in vec2 size;
in vec2 pix_coord;
in vec2 tex_coord;

float texture_nearest(sampler1D tex, float coord) {
	int tex_size = textureSize(tex, 0);
	int u = int(coord * tex_size);

	return texelFetch(tex, u, 0).r;
}

float texture_linear(sampler1D tex, float coord) {
	return texture(tex, coord).r;
}

// smooth filtering from https://www.shadertoy.com/view/XsfGDn
float texture_smooth(in sampler1D tex, in float coord) {
	float tex_size = textureSize(tex, 0);
	float u = coord * tex_size + 0.5;

	float iu = floor(u);
	float fu = fract(u);

	u = iu + fu*fu*(3.0-2.0*fu); // fuv*fuv*fuv*(fuv*(fuv*6.0-15.0)+10.0);
	u = (u - 0.5)/tex_size;

	return textureLod(tex, u, 0).r;
}

float sd_segment(in vec2 p, in vec2 a, in vec2 b) {
    vec2 pa = p-a, ba = b-a;
    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);
    return length( pa - ba*h );
}

void main() {
	float off = 1.0 / size.x;

	// get the heights of the previous, current and next pixel in [0,max_value]
	vec3 heights = vec3(-1.0);

	switch(sampling_type) {
	case 0:
		heights = vec3(
			texture_nearest(hist_tex, tex_coord.x - off),
			texture_nearest(hist_tex, tex_coord.x),
			texture_nearest(hist_tex, tex_coord.x + off)
		);
	break;
	case 1:
		heights = vec3(
			texture_linear(hist_tex, tex_coord.x - off),
			texture_linear(hist_tex, tex_coord.x),
			texture_linear(hist_tex, tex_coord.x + off)
		);
	break;
	case 2:
		heights = vec3(
			texture_smooth(hist_tex, tex_coord.x - off),
			texture_smooth(hist_tex, tex_coord.x),
			texture_smooth(hist_tex, tex_coord.x + off)
		);
	break;
	}

	// normalize to [0,1]
	heights /= float(max_value);

	heights = pow(heights, vec3(norm_gamma));

	// to pixel space
	heights *= size.y;

	// current pixel y-coord
	float y = size.y*tex_coord.y;
	
	float dist = y - heights[1];

	if(sampling_type > 0) {
		float dist_seg_prev = sd_segment(
			vec2(1.0, y),
			vec2(0.0, heights[0]),
			vec2(1.0, heights[1])
		);

		float dist_seg_next = sd_segment(
			vec2(0.0, y),
			vec2(0.0, heights[1]),
			vec2(1.0, heights[2])
		);

		dist = min(dist_seg_prev, dist_seg_next);

		if(y < heights[1])
		dist = -dist;
	}

	finish_sdf_fragment2d(dist, fill_color);
}
