#version 430

/*
The following interface is implemented in this shader:
//***** begin interface of fragment2d.glfs ***********************************
uniform layout(binding = 0) sampler2D tex;

void finish_sdf_fragment2d(in float signed_distance, in vec4 color);
void finish_sdf_fragment2d(in float signed_distance, in vec4 color, in vec2 texcoords);
void finish_fragment2d(in vec4 color);
void finish_fragment2d(in vec4 color, in vec2 texcoords);
//***** end interface of fragment2d.glfs ***********************************
*/

//***** begin interface of shape2d.glsl ***********************************
uniform ivec2 resolution;
uniform mat3 modelview2d_matrix = mat3(1.0);

uniform vec4 fill_color;
uniform vec4 border_color = vec4(1.0);
uniform float border_width = 0.0;
uniform float border_radius = 0.0;
uniform float ring_width = 0.0;
uniform float feather_width = 1.0;
uniform float feather_origin = 0.5;
uniform vec2 tex_scaling = vec2(1.0);
uniform vec2 tex_offset = vec2(0.0);

uniform bool use_fill_color = true;
uniform bool use_texture = false;
uniform bool use_texture_alpha = true;
uniform bool use_blending = false;
uniform bool use_smooth_feather = false;
uniform bool apply_gamma = true;

float get_feather_width();
vec2 get_adjusted_size();
vec4 get_active_color(vec4 color);
vec4 transform_world_to_window_space(vec2 p);
//***** end interface of shape2d.glsl ***********************************

uniform layout(binding = 0) sampler2D tex;

out vec4 frag_color;

// output a fragment originating from a sdf with the color as set in shape2d
void finish_sdf_fragment2d(in float signed_distance, in vec4 color) {
	
	signed_distance -= border_radius;
	//signed_distance -= feather_origin*get_feather_width();

	if(ring_width > 0.01)
		signed_distance = abs(signed_distance + 0.5*ring_width) - 0.5*ring_width;

	if(signed_distance > 0.0 && !use_blending)
		discard;
	
	frag_color = color;

	// get the derivatives of the distance over neighbouring fragments to calculate an antialiasing factor
	/*float dx = abs(dFdx(signed_distance));
	float dy = abs(dFdy(signed_distance));
		
	// dirty hack to fix the differentiation errors introduced by dFdx and dFdy
	if(dx < 0.05 && dy < 0.05) {
		dx = 1.0;
		dy = 0.0;
	}
	if(dx > 0.99 && dy > 0.99) {
		dx = 1.0;
		dy = 0.0;
	}

	float delta = dx + dy;
	float antialias_alpha = 1.0 - smoothstep(0.5 - delta, 0.5, signed_distance);*/
	
	// calculate an alpha factor for feathered shape borders
	float fw = get_feather_width();
	float inv_feather = 1.0/fw;

	float feather_alpha = use_smooth_feather ?
		1.0 - smoothstep(0.0, 1.0, (signed_distance + fw) * inv_feather) :
		1.0 - clamp((signed_distance + fw) * inv_feather, 0.0, 1.0);
	
	if(border_width > 0.0) {
		float border_distance = -border_width - fw;

		float border_feather_alpha = use_smooth_feather ?
			smoothstep(0.0, 1.0, (signed_distance - border_distance) * inv_feather) :
			clamp((signed_distance - border_distance) * inv_feather, 0.0, 1.0);

		//float border_antialias_alpha = smoothstep(0.5 - delta, 0.5, signed_distance + border_width);
		//frag_color = mix(frag_color, border_color, min(border_antialias_alpha + border_feather_alpha, 1.0));
		frag_color = mix(frag_color, border_color, border_feather_alpha);
	}

	// enable to show derivatives for debugging
	//frag_color = vec4((border_width+1) * dx, (border_width+1) * dy, 0.0, 1.0);

	//frag_color.a *= antialias_alpha * feather_alpha;
	frag_color.a *= feather_alpha;

	if(apply_gamma)
		frag_color.rgb = pow(frag_color.rgb, vec3(1.0/2.2));

	if(!use_blending)
		frag_color.a = 1.0;
}

// output a fragment originating from a sdf with the color as set in shape2d or the color from the texture if use_texture is enabled
void finish_sdf_fragment2d(in float signed_distance, in vec4 color, in vec2 texcoords) {
	
	if(use_texture) {
		vec4 tex_color = texture(tex, tex_scaling * texcoords + tex_offset);
		if(use_texture_alpha) color = tex_color;
		else color.rgb = tex_color.rgb;
	}

	finish_sdf_fragment2d(signed_distance, color);
}

// output a fragment with the color as set in shape2d (no texturing by default)
void finish_fragment2d(in vec4 color) {
	
	frag_color = color;
	
	if(apply_gamma)
		frag_color.rgb = pow(frag_color.rgb, vec3(1.0/2.2));

	if(!use_blending)
		frag_color.a = 1.0;
}

// output a fragment with the final color as set in shape2d or the color from the texture if use_texture is enabled
void finish_fragment2d(in vec4 color, in vec2 texcoords) {
	
	if(use_texture) {
		vec4 tex_color = texture(tex, tex_scaling * texcoords + tex_offset);
		if(use_texture_alpha) color = tex_color;
		else color.rgb = tex_color.rgb;
	}

	finish_fragment2d(color);
}
