#version 330

uniform float box_width;
uniform float box_depth;

uniform int box_coordinate_index = 1;
uniform float box_base_window = 0.0;

uniform int color_index = -1;
uniform int opacity_index = -1;
uniform int size_index = -1;
uniform int secondary_size_index = -1;

layout(location = 0) in float attribute0;
layout(location = 1) in float attribute1;
layout(location = 2) in float attribute2;
layout(location = 3) in float attribute3;
layout(location = 4) in float attribute4;
layout(location = 5) in float attribute5;
layout(location = 6) in float attribute6;
layout(location = 7) in float attribute7;

in vec4 color;

out mat3 NM;
out mat4 PM;
out vec4 color_gs;

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of quaternion.glsl ***********************************
vec4 unit_quaternion();
vec3 rotate_vector_with_quaternion(in vec3 preimage, in vec4 q);
vec3 inverse_rotate_vector_with_quaternion(in vec3 v, in vec4 q);
void quaternion_to_axes(in vec4 q, out vec3 x, out vec3 y, out vec3 z);
void quaternion_to_matrix(in vec4 q, out mat3 M);
void rigid_to_matrix(in vec4 q, in vec3 t, out mat4 M);
//***** end interface of quaternion.glsl ***********************************

//***** begin interface of plot_lib.glsl ***********************************
uniform float attribute_min[8];
uniform float attribute_max[8];
float tick_space_from_attribute_space(int ai, float value);
float attribute_space_from_tick_space(int ai, float value);
float window_space_from_tick_space(int ai, float value);
float tick_space_from_window_space(int ai, float value);
vec3 plot_space_from_window_space(vec3 pnt);
vec3 window_space_from_plot_space(vec3 pnt);
vec3 world_space_from_plot_space(vec3 pnt);
vec3 map_color(in float v_window, int idx);
vec3 map_color(in float attributes[8], in vec3 base_color, int idx);
float map_opacity(in float v_window, int idx);
float map_opacity(in float attributes[8], in float base_opacity, int idx);
float map_size(in float v_window, int idx);
float map_size(in float attributes[8], in float base_size, int idx);
vec3 map_color(in float v_window);
vec3 map_color(in float attributes[8], in vec3 base_color);
float map_opacity(in float v_window);
float map_opacity(in float attributes[8], in float base_opacity);
float map_size(in float v_window);
float map_size(in float attributes[8], in float base_size);
//***** end interface of plot_lib.glsl ***********************************

void main()
{
	// collect attributes
	float attributes[8];
	attributes[0] = attribute0;
	attributes[1] = attribute1;
	attributes[2] = attribute2;
	attributes[3] = attribute3;
	attributes[4] = attribute4;
	attributes[5] = attribute5;
	attributes[6] = attribute6;
	attributes[7] = attribute7;

	float width = box_width;
	if (size_index >= 0)
		width = map_size(attributes, width, size_index);
	float depth = box_depth;
	if (secondary_size_index >= 0)
		depth = map_size(attributes, depth, secondary_size_index);
	// compute position in window space
	vec3 position_window = vec3(
		window_space_from_tick_space(0, tick_space_from_attribute_space(0, attribute0)),
		window_space_from_tick_space(1, tick_space_from_attribute_space(1, attribute1)),
		window_space_from_tick_space(2, tick_space_from_attribute_space(2, attribute2)));

	vec3 min_window = position_window;
	min_window[box_coordinate_index]=min(position_window[box_coordinate_index],box_base_window);
	vec3 max_window = position_window;
	max_window[box_coordinate_index]=max(position_window[box_coordinate_index],box_base_window);
	vec3 min_plot = plot_space_from_window_space(min_window);
	int i = box_coordinate_index == 2 ? 0 : box_coordinate_index+1;
	int j = i == 2 ? 0 : i+1;
	min_plot[i] -= 0.5*depth;
	min_plot[j] -= 0.5*width;
	vec3 max_plot = plot_space_from_window_space(max_window);
	max_plot[i] += 0.5*depth;
	max_plot[j] += 0.5*width;

	NM = get_normal_matrix();
	vec3 box_extent = max_plot - min_plot;
	vec4 p = vec4(0.5*(min_plot+max_plot),1.0);
	// compute box transformation
	mat4 BM = mat4(0.0);
	BM[0][0] = box_extent[0];
	BM[1][1] = box_extent[1];
	BM[2][2] = box_extent[2];
	BM[3]    = p;
	PM = get_modelview_matrix()*BM;

	// map to visual attributes
	color_gs = color;
	if (color_index >=0)
		color_gs.rgb = map_color(attributes, color_gs.rgb, color_index);
	if (opacity_index >= 0)
		color_gs.a = map_opacity(attributes, color_gs.a, opacity_index);

	gl_Position = p;
}