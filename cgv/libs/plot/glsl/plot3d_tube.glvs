#version 330 core

uniform int color_index = -1;
uniform int secondary_color_index = -1;
uniform int opacity_index = -1;
uniform int secondary_opacity_index = -1;
uniform int size_index = -1;
uniform int secondary_size_index = -1;

uniform float radius_scale = 1.0;

layout(location = 0) in float attribute0;
layout(location = 1) in float attribute1;
layout(location = 2) in float attribute2;
layout(location = 3) in float attribute3;
layout(location = 4) in float attribute4;
layout(location = 5) in float attribute5;
layout(location = 6) in float attribute6;
layout(location = 7) in float attribute7;

in vec4 color;
//in vec4 secondary_color;
in float size;

out vec4 color_gs;

//***** begin interface of plot_lib.glsl ***********************************
uniform float attribute_min[8];
uniform float attribute_max[8];
float tick_space_from_attribute_space(int ai, float value);
float attribute_space_from_tick_space(int ai, float value);
float window_space_from_tick_space(int ai, float value);
float tick_space_from_window_space(int ai, float value);
vec3 plot_space_from_window_space(vec3 pnt);
vec3 window_space_from_plot_space(vec3 pnt);
vec3 world_space_from_plot_space(vec3 pnt);
vec3 map_color(in float v_window, int idx);
vec3 map_color(in float attributes[8], in vec3 base_color, int idx);
float map_opacity(in float v_window, int idx);
float map_opacity(in float attributes[8], in float base_opacity, int idx);
float map_size(in float v_window, int idx);
float map_size(in float attributes[8], in float base_size, int idx);
vec3 map_color(in float v_window);
vec3 map_color(in float attributes[8], in vec3 base_color);
float map_opacity(in float v_window);
float map_opacity(in float attributes[8], in float base_opacity);
float map_size(in float v_window);
float map_size(in float attributes[8], in float base_size);
//***** end interface of plot_lib.glsl ***********************************

void main()
{
	// collect attributes
	float attributes[8];
	attributes[0] = attribute0;
	attributes[1] = attribute1;
	attributes[2] = attribute2;
	attributes[3] = attribute3;
	attributes[4] = attribute4;
	attributes[5] = attribute5;
	attributes[6] = attribute6;
	attributes[7] = attribute7;

	// map to visual attributes
	color_gs = color;
	if (color_index >=0)
		color_gs.rgb = map_color(attributes, color_gs.rgb, color_index);
	if (opacity_index >= 0)
		color_gs.a = map_opacity(attributes, color_gs.a, opacity_index);
	float radius = size;
	if (size_index >= 0)
		radius = map_size(attributes, radius, size_index);

	// transform vertex to clip space
	vec3 position_window = vec3(
		window_space_from_tick_space(0, tick_space_from_attribute_space(0, attribute0)),
		window_space_from_tick_space(1, tick_space_from_attribute_space(1, attribute1)),
		window_space_from_tick_space(2, tick_space_from_attribute_space(2, attribute2)));
	vec3 position_plot = plot_space_from_window_space(position_window);
	gl_Position = vec4(position_plot, radius*radius_scale);
}