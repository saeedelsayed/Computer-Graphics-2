#version 430

#define ENABLE_TEXTURES 0

#define M_PI 3.1415926535f

#define SAMPLES_COUNT 64
#define SAMPLES_COUNT_DIV_2 32
#define INV_SAMPLES_COUNT (1.0 / SAMPLES_COUNT)

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_inverse_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of fragment.glfs ***********************************
uniform float gamma = 2.2;
void finish_fragment(vec4 color);
//***** end interface of fragment.glfs ***********************************

uniform layout(binding = 0) samplerCube irradiance_map;
uniform layout(binding = 1) samplerCube prefiltered_specular_map;
uniform layout(binding = 2) sampler2D brdf_lut;
uniform layout(binding = 3) sampler2DShadow shadow_map;
uniform layout(binding = 4) sampler3D jitter_tex;
#if ENABLE_TEXTURES == 1
uniform layout(binding = 5) sampler2D albedo_tex;
uniform layout(binding = 6) sampler2D metallic_tex;
uniform layout(binding = 7) sampler2D roughness_tex;
uniform layout(binding = 8) sampler2D normal_tex;
#endif

uniform vec3 eye_pos;
uniform vec3 light_dir;

uniform vec3 F0;
uniform float roughness;
#if ENABLE_TEXTURES == 1
uniform float normal_map_scale;
#endif

uniform float shadow_blur;

in vec4 position_model;
in vec4 position_light_space;
in vec3 normal_model;
in vec3 tangent_model;
in vec2 texcoord_fs;
in vec4 color_fs;

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

/*float compute_shadow_factor(vec4 p_light_space, vec3 normal) {
	// perform perspective divide
    vec3 projCoords = p_light_space.xyz;// / p_light_space.w;
	// prevent sampling outside the lights frustum
	if(projCoords.z > 1.0)
        return 1.0;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    //float closestDepth = texture(shadow_map, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
	// compute bias to prevent moire effects
	//vec3 light_dir = normalize(-vec3(4.0f, 4.0f, -2.0f));
	float bias = max(0.05 * (1.0 - dot(normal, light_dir)), 0.005); 
    
	// check whether current frag pos is in shadow
    //float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;

	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadow_map, 0);
	//for(int x = -1; x <= 1; ++x) {
	//	for(int y = -1; y <= 1; ++y) {
	//		float pcfDepth = texture(shadow_map, projCoords.xy + vec2(x, y) * texelSize).r;
	//		shadow += ((currentDepth - bias) > pcfDepth) ? 1.0 : 0.0;
	//	}    
	//}
	shadow /= 9.0;

    return 1.0 - 0.5*shadow;
}

const vec2 poisson_disk[4] = vec2[](
  vec2( -0.94201624, -0.39906216 ),
  vec2( 0.94558609, -0.76890725 ),
  vec2( -0.094184101, -0.92938870 ),
  vec2( 0.34495938, 0.29387760 )
);

const vec2 sample_offsets[4] = vec2[](
  vec2(-0.5, -0.5),
  vec2(+0.5, -0.5),
  vec2(-0.5, +0.5),
  vec2(+0.5, +0.5)
);*/

/*float random(vec4 seed4) {
	float dot_product = dot(seed4, vec4(12.9898, 78.233, 45.164, 94.673));
    return fract(sin(dot_product) * 43758.5453);
}*/

/*float random(vec2 p) {
	return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);
}

float compute_visibility_factor(vec4 p_light_space, vec3 normal) {
	vec3 proj_coords = p_light_space.xyz;

	float shadow = 0.0;
	float bias = max(0.05 * (1.0 - dot(normal, light_dir)), 0.005);

	

	//if(texture(shadow_map, proj_coords.xy).r < proj_coords.z - bias){
	//	visibility = 0.0;
	//}

	/*for(int i = 0; i < 4; ++i){
		if(texture(shadow_map, proj_coords.xy + poisson_disk[i]/700.0).r  <  proj_coords.z - bias) {
			visibility-=0.2;
	}*

	//vec3 shadow_coord = vec3(proj_coords.xy, proj_coords.z - bias);
	//float shadow_factor = texture(shadow_map, shadow_coord);
	//shadow = shadow_factor;

	//vec3 shadow_coord = vec3(proj_coords.xy, proj_coords.z - bias);
	//float a = texture(shadow_map, shadow_coord.xy).r;
	//shadow = a < proj_coords.z - bias ? 1.0 : 0.0;

	float texel_size = 1.0 / textureSize(shadow_map, 0).x;

	const int sample_count = 4;
	const float multiplier = float(2 * sample_count);
	const float normalization_factor = 1.0 / float(sample_count);

	for(int i = 0; i < sample_count; ++i){
		//int index = i;
		////int index = int(4.0*random(vec4(gl_FragCoord.xyy, i))) & 0x00000003;
		//vec3 shadow_coord = vec3(proj_coords.xy + poisson_disk[index] * texel_size, proj_coords.z - bias);
		//float shadow_factor = 1.0 - texture(shadow_map, shadow_coord);
		//visibility -= 0.25 * shadow_factor;

		/*float u = random(multiplier * gl_FragCoord.xy + 0.0);
		float v = random(multiplier * gl_FragCoord.xy + 0.1);
		vec2 sample_offset;

		u *= 2.0*M_PI;
		v *= sqrt(v);

		sample_offset.x = v * cos(u);
		sample_offset.y = v * sin(u);*

		vec3 shadow_coord = vec3(proj_coords.xy + shadow_blur * sample_offsets[i] * texel_size, proj_coords.z - bias);
		float shadow_factor = 1.0 - texture(shadow_map, shadow_coord);
		shadow += shadow_factor;
	}
	
	shadow *= normalization_factor;

	return 1.0 - shadow;
}*/

float compute_shadow_factor(vec4 p_light_space, vec3 normal) {
	//p_light_space.xyz = 0.5*p_light_space.xyz + 0.5;

	float texel_size = 1.0 / textureSize(shadow_map, 0).x;
	vec2 jitter_texel_size = 1.0 / textureSize(jitter_tex, 0).xy;

	float shadow = 0;
	float fsize = shadow_blur * texel_size;
	vec3 jcoord = vec3(gl_FragCoord.xy * jitter_texel_size, 0);
	vec3 smCoord = p_light_space.xyz;

	// calculate diffuse dot product
	float ndl = max(dot(normal, light_dir), 0.0);

	float bias = max(0.05 * (1.0 - ndl), 0.005);

	smCoord.z -= bias;

	for (int i = 0; i < 32; ++i) {
		vec4 offset = texture(jitter_tex, jcoord);
		offset = 2.0 * offset - 1.0;
		jcoord.z += 1.0 / SAMPLES_COUNT_DIV_2;

		smCoord.xy = p_light_space.xy + fsize * offset.xy;
		shadow += texture(shadow_map, smCoord);
		smCoord.xy = p_light_space.xy + fsize * offset.zw;
		shadow += texture(shadow_map, smCoord);
	}
	shadow *= INV_SAMPLES_COUNT;

	// take cheap "test" samples first
	/*for (int i = 0; i < 4; ++i) {
		vec4 offset = texture(jitter_tex, jcoord);
		offset = 2.0 * offset - 1.0;
		jcoord.z += 1.0 / SAMPLES_COUNT_DIV_2;

		smCoord.xy = p_light_space.xy + fsize * offset.xy;
		shadow += texture(shadow_map, smCoord) / 8;
		smCoord.xy = p_light_space.xy + fsize * offset.zw;
		shadow += texture(shadow_map, smCoord) / 8;
	}
	
	// if all the test samples are either zeroes or ones, or diffuse dot
	// product is zero, we skip expensive shadow-map filtering
	if((shadow - 1) * shadow * ndl > 0.001) {
		// most likely, we are in the penumbra
		shadow *= 1.0f / 8; // adjust running total
		// refine our shadow estimate
		for (int i = 0; i < SAMPLES_COUNT_DIV_2 - 4; ++i) {
			vec4 offset = texture(jitter_tex, jcoord);
			offset = 2.0 * offset - 1.0;
			jcoord.z += 1.0f / SAMPLES_COUNT_DIV_2;

			smCoord.xy = p_light_space.xy + fsize * offset.xy;
			shadow += texture(shadow_map, smCoord) * INV_SAMPLES_COUNT;

			smCoord.xy = p_light_space.xy + fsize * offset.zw;
			shadow += texture(shadow_map, smCoord) * INV_SAMPLES_COUNT;
		}
	}*/
	
	return shadow;
}

void main()
{
#if ENABLE_TEXTURES == 1
	vec3 albedo = texture(albedo_tex, texcoord_fs).rgb;
	vec3 _F0 = F0*texture(metallic_tex, texcoord_fs).rgb;
	float _roughness = roughness*texture(roughness_tex, texcoord_fs).r;
	vec3 _normal = 2.0 * texture(normal_tex, texcoord_fs).xyz - 1.0; // load and rescale normal to [-1,1]
#else
	vec3 albedo = color_fs.rgb;
	vec3 _F0 = F0;
	float _roughness = roughness;
#endif

	vec3 V = normalize(eye_pos - position_model.xyz);
	vec3 N = normalize(normal_model);

#if ENABLE_TEXTURES == 1
	// re-orthogonalize T with respect to N using Gram-Schmidt process
	vec3 T = normalize(tangent_model - dot(tangent_model, normal_model) * normal_model);
	// then retrieve perpendicular bitangent vector with the cross product of T and N
	vec3 bitangent_model = cross(normal_model, normalize(tangent_model));
	mat3 TBN = mat3(tangent_model, bitangent_model, normal_model);
	N = mix(N, normalize(TBN * _normal), normal_map_scale);
#endif


	vec3 R = reflect(-V, N);

	const float MAX_REFLECTION_LOD = 4.0;
    vec3 prefilteredColor = textureLod(prefiltered_specular_map, R,  _roughness * MAX_REFLECTION_LOD).rgb;

	float ao = 1.0;

	vec3 kS = fresnelSchlickRoughness(max(dot(N, V), 0.0), _F0*albedo, _roughness);
	vec3 kD = 1.0 - kS;

	vec2 envBRDF  = texture(brdf_lut, vec2(max(dot(N, V), 0.0), _roughness)).rg;

	vec3 irradiance = texture(irradiance_map, N).rgb;
	vec3 diffuse    = irradiance * albedo;
	//vec3 diffuse    = albedo;
	
	float ndl = max(dot(N, light_dir), 0.0);
	float shadow = compute_shadow_factor(position_light_space, N);
	float visibility = 1.0 - 0.5*(1.0 - shadow * ndl);
	diffuse *= visibility;

	vec3 specular = prefilteredColor * (kS * envBRDF.x + envBRDF.y);
	specular *= mix(1.0, shadow, _roughness);

	vec3 ambient    = (kD * diffuse + specular) * ao;

	// normal light computation here:
	// ...

	//float shadow = compute_shadow_factor(position_light_space, n_world);
	//float visibility = compute_visibility_factor(position_light_space, n_world);

	vec4 frag_color = vec4(ambient, 1.0);
	//vec4 frag_color = vec4(0.5*tangent_model + 0.5, 1.0);
	//vec4 frag_color = vec4(texcoord_fs, 0.0, 1.0);

	finish_fragment(frag_color);
}
