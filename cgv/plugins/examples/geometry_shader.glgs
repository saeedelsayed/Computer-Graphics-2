#version 330

uniform uint nr_subdivisions = 32u;
uniform int mode = 1;
uniform bool show_segments = true;
uniform float tangent_scale = 0.5;

layout(lines_adjacency) in;
layout(line_strip, max_vertices=128) out;

flat out vec3 color;

mat4 control_matrix;

const mat4 bezier_basis  = mat4(1,0,0,0, -3,3,0,0, 3,-6,3,0, -1,3,-3,1);
const mat4 hermite_basis = mat4(1,0,0,0, 0,1,0,0, -3,-2,-1,3, 2,1,1,-2);
mat4 hermite_data = mat4(0,1,0,0, -0.5*tangent_scale,0,0.5*tangent_scale,0, 0,-0.5*tangent_scale,0,0.5*tangent_scale, 0,0,1,0);

void emit_vertex(uint i)
{
	float t = float(i) / float(nr_subdivisions);
	if (mode == 0)
		gl_Position = mix(gl_in[1].gl_Position, gl_in[2].gl_Position, t);
	else
		gl_Position = control_matrix*vec4(1, t, t*t, t*t*t);
	EmitVertex();
}

void main()
{
	for (int c=0; c<4; ++c)
		control_matrix[c] = gl_in[c].gl_Position;
	control_matrix *= mode == 1 ? bezier_basis : hermite_data*hermite_basis;
	color = vec3(1.0,1.0,0.0);
	for (uint i = 0u; i<=nr_subdivisions; ++i) {
		if (show_segments)
			color = vec3(ivec3(mod(i,2),mod(i,2),1-mod(i,2)));
		emit_vertex(i);
	}
}