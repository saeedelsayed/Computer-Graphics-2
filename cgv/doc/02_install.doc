// This file is for Doxygen input. It is not compiled.

using namespace cgv;

/*! \page install Installation and Conventions

\section prereq Prerequisits

-# GPU and GPU drivers supporting OpenGL 3.3 minimum but better 4.3 or higher
-# install windows or linux (manual was tested on ubuntu 20.04)
-# install git
-# install cmake (optional on Windows when using Visual Studio as internal build system can be used instead)
-# install compiler (gcc, clang, visual studio)
-# on linux, several development packages for system libraries are needed. For Debian-based distributions (e.g. Ubuntu), these are \code libglx-dev libglew-dev libxft-dev libxinerama-dev libxi-dev \endcode On distributions by OpenSUSE (Leap, Tumbleweed, MicroOS/Aeon etc.) the required packages are \code Mesa-libGL-devel glew-devel libXft-devel libXinerama-devel libXi-devel \endcode
-# choose parent of source directory and open shell/cmd prompt (**avoid paths with spaces such as windows desktop, home or library paths**)
-# clone current version with git \code git clone https://github.com/sgumhold/cgv.git \endcode
-# switch to \b develop branch \code git checkout develop \endcode

\section envir Environment Variables

In order to be able to work with the cgv framework, the following environment
variables need to be configured
- \c CGV_DIR (obligatory) ... path of cgv framework sources
- \c CGV_INSTALL ... path, where compiled libraries and applications are installed.
If not defined the Windows build rules for resource files and shaders won't find the corresponding
tools and therefore fail. If these are not needed, CGV_INSTALL defaults to CGV_DIR. Executables
and shared libraries / dlls are copied to \c "$(CGV_INSTALL)/bin" and libraries to \c "$(CGV_INSTALL)/lib"
- \c PATH (optional) ... the directories \c "$(CGV_INSTALL)/bin" and \c "$(CGV_DIR)/bin" should be added to the path variable
- \c CGV_BUILD (optional) ... path, where the intermediate files are created. For example 
\c "c:/temp/build_cgv". If not set,\c CGV_BUILD defaults to \c CGV_DIR/build.
- \c CGV_DATA (optional) ... the root paths for datasets which are used in \c "cgv/base/import.h" to find files.
- \c CGV_PLATFORM (Windows option) ... can be WIN32 or x64 and can be defined with \c define_platform.bat script (defaults to WIN32)
- \c CGV_WINDOWS_SDK (Windows option) ... since VS 2017; can be one of the installed toolsets of visual studio and can be defined with \c define_windows_sdk.bat (defaults to most current toolset version of selected visual studio version)
- \c CGV_CHARSET (Windows option) ... only for Visual Studio; can be MultiByte (char is 8 bit) or Unicode (char is 16 bit) and defaults to MultiByte. Use \c define_charset.bat to change the value.
- \c CGV_OPTIONS (optional) ... semicolon separated further options configured with \c define_options.bat that also shows all options with explanation.

Under windows the following six scripts - located in the root directory
of the cgv framework - help to manage the necessary environment variables. 
Just double click them to execute them:
- \c show_system_variables.bat ... shows the current settings
- \c define_system_variables.bat ... can be started without or with one parameter. 
It allows to set all necessary environment variables interactively or automatically.
One has to answer at least the first question for the used compiler. The \c CGV_DIR is
derived from the location of the script file. \c CGV_BUILD is set to the parameter
passed to the script or without parameter it is set to \c CGV_DIR/build. To specify
the build path as parameter, you can drag the build path with the mouse onto the
script. If the build path is set through the command line parameter, \c CGV_INSTALL
is set to \c CGV_BUILD, otherwise to \c CGV_DIR. The variable \c CGV_COMPILER (see 
section on Makefile generation) is set from the user interaction. Finally, the user 
specific path extension is augmented by \c "$(CGV_DIR)/bin" and \c "$(CGV_INSTALL)/bin".
- \c define_data_dir.bat ... sets the system variable \c CGV_DATA. The script
is started with one parameter - the path to the cgv data directory. The parameter 
can be defined by dragging the data directory in the windows explorer onto the 
batch script.
- \c undefine_system_variables.bat ... removes all cgv specific settings from the
system variables.
- \c build_example_solution.bat ... after definition of the system variables invoke
this script to start the internal makefile generation process on the examples solution.
- \c define_project_dir.bat (deprecated) ... sets the system variable \c CGV_PROJECT_DIR. The script
is started with one parameter - the path to the cgv project directory. The parameter 
can be defined by dragging the project directory in the windows explorer onto the 
batch script.
- \c define_support_dir.bat (deprecated) ... sets the system variable \c CGV_SUPPORT_DIR. The script
is started with one parameter - the path to the cgv support directory. The parameter 
can be defined by dragging the support directory in the windows explorer onto the 
batch script.

\section cmake Using CMake

-# set environment variable \c CGV_DIR to cgv directory created by git
  - windows: see above or use \code reg ADD HKEY_CURRENT_USER\Environment /v CGV_DIR /t REG_SZ /d source_parent_dir\cgv \endcode
  - ubuntu: append \code export CGV_DIR=source_parent_dir/cgv \endcode to \c ~/.bashrc and restart shell
-# use cmake or cmake-gui as usual with your favorite generator (choosing a build directory serving also as cmake cache)
  - for debug support on linux set \c CMAKE_BUILD_TYPE=Debug.
  - during development enable shared libraries with \c BUILD_SHARED_LIBS=True
  - when using Visual Studio ensure choose configuration after starting
  - on windows building and starting without specific choice of generator could look like this
\code
  mkdir build
  cd build
  cmake .. -DBUILD_SHARED_LIBS=True
  cmake --build . --target examples --config Debug
  bin\Debug\cgv_viewer.exe plugin:cg_fltk plugin:cg_ext plugin:cg_icons plugin:crg_stereo_view plugin:crg_antialias plugin:crg_depth_of_field plugin:crg_light plugin:cg_meta plugin:cmi_io plugin:cmv_avi plugin:crg_grid plugin:co_web plugin:cmf_tt_gl_font plugin:examples
\endcode
  - on linux building and starting without specific choice of generator could look like this
\code
  mkdir build
  cd build
  cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=True
  cmake --build . --target examples -j8
  bin/cgv_viewer plugin:cg_fltk plugin:cg_ext plugin:cg_icons plugin:crg_stereo_view plugin:crg_antialias plugin:crg_depth_of_field plugin:crg_light plugin:cg_meta plugin:cmi_io plugin:crg_grid plugin:cmf_tt_gl_font plugin:examples
\endcode
  - to debug in IDE add launch target with \c cgv_viewer as program and command line arguments as in examples above

\section ppp Using Internal Build System (Windows with Visual Studio only)

For a fast start under windows with visual studio do the following:
- create a build directory where the temporary files should be stored
- to use the x64 platform (nowadays the standard) start the \c define_platform.bat script and follow instructions
- in case you do not want to use the most current visual studio toolset start the \c define_windows_sdk.bat script and follow instructions
- use 2 explorer windows and drag the newly created build directory onto \c cgv/define_system_variables.bat 
  alternatively you can run the following command in the command prompt:
\code
define_system_variables.bat <full-path-to-build-directory>
\endcode
- select your configuration
- close the command prompt and optionally open a new one to ensure that the systems variables have been updated
- bind the extension \c .pj to \c cgv/bin/generate_makefile.bat by right clicking \c cgv/plugins/examples/examples.pj
  and finding \c cgv/bin/generate_makefile.bat as the default application for \c .pj files. This generates
  the solution of the examples plugin.
- alternatively you can run \c cgv/build_example_solution.bat or drag and drop \c cgv/plugins/examples/examples.pj
  onto \c cgv/bin/generate_makefile.bat
- after visual studio started, select configuration \c "Debug Dll" or \c "Release Dll"
- ensure that examples plugin is the active project
- build solution
- run examples project and select example from menu (try bump mapper, which can also be created by \c <Ctrl-B>)
- press \c <F1> to blend in help on shortcuts and mouse control of the view
- try out the mouse control of the view by rotating the view, translating it and zooming in and out
- try out the shortcuts
- click through the user interface

\section thirdparty Third Party Libraries

The framework uses the following platform independent third party 
libraries with completely free licenses
- zlib
- libjpeg
- libpng
- libtiff
- fltk
- ann (used in point_cloud lib to build knn graph)
- glew
- webserver (no real dependency, pretty unknown little lib)

\b glew is included on both plattforms. When using the cgv framework, the
\c GL/glew.h header need not be included directly. Normally, one includes
the header cgv/render/gl/gl.h, which includes the glew header. If the
\c GL/wglew.h header is needed too, include cgv/render/gl/wgl.h instead.
For all other libraries except \b ann, one typically installs them independent
of the cgv framework.

The following third party libraries are used and are typically preinstalled
on most platforms
- opengl
- glu

\section new_project Creating a new Plugin Project (CMake)

A new project starts with a CMakeLists.txt file like this:

\code
cmake_minimum_required(VERSION 3.15)
project(my_plugin_project)

find_package(CGV REQUIRED)

add_library(my_plugin SHARED my_plugin.cpp)
target_link_libraries(my_plugin cgv_gl)
add_dependencies(my_plugin cg_fltk crg_stereo_view)
\endcode

The following commands will run CMake and then build your plugin.
"<path to cgv>" has to point to either the locally checked out git repository, or a downloaded release of the cgv framework.
The latest release can be found here: https://github.com/sgumhold/cgv/releases/latest

\code
mkdir build
cd build
cmake -D CGV_DIR=<path to cgv> ..
cmake --build .
\endcode

\section makegen Internal Makefiles (Windows only)

The cgv framework comes with a generator for visual studio solutions. 
It is based on cgv specific project files 
with the extension ".pj".

\a Hint: A template project file is located at \c CGV_DIR/make/ppp/templates/pj.ppp.
It documents all possible entries to a project file. To write a new
project file, one typically copies this template or \c CGV_DIR/plugins/examples/examples.pj,
renames it to something like "my_project.pj" and edits it with a favorite text editor. 
The current version of this file is inserted to the end of this page

After a project file has been created, one can generate the visual studio
solutions by passing the file as command line argument to the batch-script 
\c "CGV_DIR/bin/generate_makefile.bat". This script only runs if the system 
variable \c CGV_COMPILER is set.

\a Hint: It is very convenient to bind the \c "generate_makefile.bat" script as default 
program to the extension \c "*.pj". This can be done by double clicking a pj-file and
selecting \c "generate_makefile.bat" as default program.

\a Hint: In the cgv root directory there is a windows script \c "build_example_solution.bat"
that can be double clicked after the system variables have been set correctly 
with the script define_system_variables.bat. It calls \c "generate_makefile.bat" with
the examples plugin pj-File as argument. This allows you to get started very
easily.

\a Careful! Since Visual Studio 2008 ppp also generates \c "*.user" files, which
define the to be executed application and the command line arguments when starting
the application from Visual Studio. If a project is opened in Visual Studio while ppp
is used to generate project, solution and user files, Visual Studio only reloads the
solution and the project files but \b not the user file. Therefore the command line
arguments are not updated and newly added plugins won't be read when starting the
application from Visual Studio. Thus take care to close or unload the main project 
in Visual Studio before rebuilding changed user files.

The current version of the template for project files is

\c make/ppp/templates/pj.ppp

\include pj.ppp

*/
